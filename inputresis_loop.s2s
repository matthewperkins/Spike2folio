'SCRIPT TO measure inptut resistence in a two electrode experiment.
'MUST have a designated channel as a current moniter, for each cell.

'''INCLUSIONS'''
#include <C:\Documents and Settings\matthew\Documents\weiss_lab\Spike2folio\basic_view.s2s>     'this will bring in two globals: GVt% and GChanList%[]
#include <C:\Documents and Settings\matthew\Documents\weiss_lab\Spike2folio\basic_spk_find.s2s> 'this will bring in two globals: GChan% and GEventChan%
#include <C:\Documents and Settings\matthew\Documents\weiss_lab\Spike2folio\SpkWdth.s2s>        'bring in func SpkWdth(LChan%, LSpkPeakTime, RMP, AmpFrac)
#include <C:\Documents and Settings\matthew\Documents\weiss_lab\Spike2folio\FindRMP.s2s>        'bring in func FindRMP(LChan%)
#include <C:\Documents and Settings\matthew\Documents\weiss_lab\Spike2folio\CrrChngEvnt.s2s>    'bring in func CrrChngEvnt(LIChan%, LVChan%)

'''SCRIPT CONSTANTS'''
    'average the membrane potiential before the current pulse, over this many seconds
    var avgover;
    avgover := 0.2;
'''END SCRIPT CONSTANTS'''


'''FILE NAMES PREP'''
    var GFName$, GDirString$;
    GFName$ := Print$("%s%s",FileName$(3),FileName$(4));
    GDirString$ := Print$("%s\%s",FileName$(2),"..\\indiv_cells\\");
'''END FILE NAMES PREP'''



'''MAIN LOOP PREP'''
'vars for measures'
    var seqstart, seqend, vstprmp, vstpi, vstpdelt, current, fspkwdth;
    var GRMP;
    var numspks%, spklaten, trsharry[200], tau;
    
'vars for time holding in current sequence
    var SeqStartTHolder;
    var SeqEndT;
    var stepstart, stepend;

'channel vars
    var GCrrChngEvnt%, chancurrenttmp%;
    '#defined globals GChan% GEventChan%

'vars for flow cntrl 
    var gotonext%,i%,j%;
    var isokay%:=1;
    var GNumSteps%;
    var howmanychans%;

'vars for files and views
    var outresistname$, GOutResistVh%[10], channame$;
 
''''''BEGIN MAIN''''''
howmanychans% := Input("How many chans have steps?", 2);
GOutResistVh%[0] := howmanychans%;

'this big ugly loop is main
for i% := 1 to howmanychans% do
    'return the view    
    RestoreStartView();
        
    GChan% := Input("Which Voltage chan number?", i%);
    chancurrenttmp% := Input("Which Current moniter chan number?", i%);
    channame$ := ChanTitle$(GChan%);
    TrimRight(channame$);
    ChanTitle$(GChan%, channame$);
    outresistname$ := "inptrst.csv";
    outresistname$ := Print$("%s_%s_%s",GFName$,channame$,outresistname$);
    GNumSteps% := Input("How many steps?",1);
    GOutResistVh%[i%] := FileNew(1);
    
    'Print the header for the measurements csv file
    View(GOutResistVh%[i%]).PrntHeader(GNumSteps%);
    
    'return the view    
    RestoreStartView();
    
    'get the spikes from the channel as events    
    GEventChan% := FindSpks(GChan%);
    GRMP := FindRMP(GChan%);
    
    'add created event channel to GChanList (displayed with RestoreStartView)
    AddChanToStartView(GEventChan%);
    
    'create a current change event chan
    GCrrChngEvnt% := CrrChngEvnt(chancurrenttmp%, GChan%);
    AddChanToStartView(GCrrChngEvnt%);
    RestoreStartView();
       
    'prep cursors
    gotonext% := 1;
    SeqStartTHolder := 0;
    while (gotonext%) do
        CursorDelete(-1);
        
        'find the next current change event on curr change channel
        SeqStartTHolder := NextTime(GCrrChngEvnt%, SeqStartTHolder);
        
        'if no more events break exit while
        if SeqStartTHolder=-1 then
            break
        endif;
        
        'put a cursor at the found event, this will be the sequence start
        CursorNew(SeqStartTHolder,1);
        CursorLabel(4, 1, "Seq Start");CursorLabelPos(1,10);
        
        'search in advance of the sequence start time, to find the end of the sequence
        SeqEndT := SeqStartTHolder;
        for j% := 1 to (GNumSteps%*2)-1 do
            SeqEndT := NextTime(GCrrChngEvnt%, SeqEndT);
        next;
        
        'put a cursor at what I is probably the sequence end
        '(but this will be off if there are extra events in the curr change channel 
        CursorNew(SeqEndT, 2);
        CursorLabel(4,2,"Seq End");CursorLabelPos(2,10);
        
        'Draw the screen around the found cursors
        RestoreStartView();
        XRange(SeqStartTHolder-35,SeqEndT+35);
        
        'Change the sequence end if necessary
        ChngSqn(GCrrChngEvnt%, SeqEndT);
        
        'Make measures for each step in the series
        if isokay% then
            docase 
                case(GNumSteps% = 1) then
                stepstart := SeqStartTHolder;
                stepend := SeqEndT;
                mkmeasurs(GChan%, chancurrenttmp%, GEventChan%);
                printmeasurs(GOutResistVh%[i%],1,GNumSteps%);
                SeqStartTHolder := SeqEndT
                else
                    for j% := 1 to GNumSteps% do
                        docase
                            case (j%=1) then
                                stepstart := SeqStartTHolder;
                                stepend := NextTime(GCrrChngEvnt%,stepstart);
                            case (j%=GNumSteps%) then
                                stepstart := NextTime(GCrrChngEvnt%, stepend);
                                stepend := SeqEndT;
                            else
                                stepstart := NextTime(GCrrChngEvnt%,stepend);
                                stepend := NextTime(GCrrChngEvnt%,stepstart);
                        endcase
                        mkmeasurs(GChan%, chancurrenttmp%, GEventChan%);
                        printmeasurs(GOutResistVh%[i%],j%, GNumSteps%);
                    next
            endcase;
        endif
    wend
    View(GVt%);
    View(GOutResistVh%[i%]); FilePathSet(GDirString$); FileSaveAs(outresistname$,1); FileClose();
next

proc ChngSqn(GCrrChngEvnt%, SeqEndT)
    makeeventcursors(3);
    ToolbarSet(10,"&A add||add a spikes at add cursor", addspk%);
    ToolbarSet(9,"&E delone||del spk nearest del cursor1", delonespk%);
    ToolbarSet(8,"&U delbtwn||del all spks btwn two del cursors", delspksbtw%);
    ToolbarSet(7,"&F done||Don't count this guy, Im done", Fnsh%);
    ToolbarSet(6,"&E StrtBck||reverse seq start", SeqStartPre%);
    ToolbarSet(5,"&U StrtFrwd||advance seq start", SeqStartNext%);
    ToolbarSet(4,"&J EndBck||reverse seq end", SeqEndPre%);
    ToolbarSet(3,"&K EndFrwd||advance seq end", SeqEndNext%);
    ToolbarSet(2,"$&Q okay", Okay%);
    ToolbarEnable(1,1);
    Toolbar("",1);
end

'Sequence end chnging toolbar funcs'
    func Fnsh%()
        gotonext% := 0;
        isokay% := 0;
        return(0);
    end

    func SeqStartPre%()
        SeqStartTHolder := LastTime(GCrrChngEvnt%, SeqStartTHolder);
        Cursor(1, SeqStartTHolder);
        'temporary - repos seq end cursor aswell, just by one event
        SeqEndT := NextTime(GCrrChngEvnt%, SeqStartTHolder);
        Cursor(2, SeqEndT);
        Draw();
    return(1);
    end

    func SeqStartNext%()
        SeqStartTHolder := NextTime(GCrrChngEvnt%, SeqStartTHolder);
        Cursor(1, SeqStartTHolder);
        'temporary - repos seq end cursor aswell, just by one event
        SeqEndT := NextTime(GCrrChngEvnt%, SeqStartTHolder);
        Cursor(2, SeqEndT);
        Draw();
    return(1);
    end

    func SeqEndPre%()
        SeqEndT := LastTime(GCrrChngEvnt%, SeqEndT);
        Cursor(2, SeqEndT);
        Draw();
    return(1);
    end

    func SeqEndNext%()
        SeqEndT := NextTime(GCrrChngEvnt%, SeqEndT);
        Cursor(2, SeqEndT);
        Draw();
    return(1);
    end

    func Okay%()
    return(0);
    end
'Sequence end chnging toolbar funcs' 

proc mkmeasurs(chanvolts%,chancurrent%,chanspks%)
    vstprmp := ChanMeasure(chanvolts%,2,stepstart-avgover, stepstart);
    vstpi := ChanMeasure(GChan%,2,stepend-avgover, stepend);
    vstpdelt := vstpi - vstprmp;
    current := ChanMeasure(chancurrent%,2,stepend, stepstart);
    numspks% := ChanData(chanspks%, trsharry[], stepstart, stepend);
    if (numspks%) then 
        spklaten := NextTime(chanspks%, stepstart);
        fspkwdth := SpkWdth(chanvolts%, spklaten, GRMP, 0.63);
        spklaten := spklaten - stepstart;
    else
        spklaten := -1;
    endif
    'search for spikes
end

proc printmeasurs(outvh%, i%, howmanysteps%)    
    View(outvh%);
    if (i% = 1) then
        Print("%s,",GFName$);
        Print("%.4f,",SeqStartTHolder);
        Print("%.4f,",SeqEndT);
    endif
    Print("%.4f,",stepstart);
    Print("%.4f,",stepend);        
    Print("%.4f,",vstprmp);
    Print("%.4f,",vstpi);
    Print("%.4f,",vstpdelt);
    Print("%.4f,",current);
    Print("%d,",numspks%);
    Print("%.4f,",spklaten);
    Print("%.4f,",fspkwdth);
    if (i% = howmanysteps%) then
        Print("\n");
    endif
    View(GVt%);
end            

'''Print the header of the file'''
func PrntHeader(LNSteps%)
    var Lj%;
    for Lj% := 1 to LNSteps% do 
        if (Lj% = 1) then
            Print("filename,");
            Print("seqstart,");
            Print("seqend,");
        endif
        Print("%s_%d%s","stpstart",Lj%,",");
        Print("%s_%d%s","stpend",Lj%,",");        
        Print("%s_%d%s","vstp_rmp",Lj%,",");
        Print("%s_%d%s","vstp_i",Lj%,",");
        Print("%s_%d%s","vstp_delt",Lj%,",");
        Print("%s_%d%s","crnt_mntr",Lj%,",");
        Print("%s_%d%s","num_spks",Lj%,",");
        Print("%s_%d%s","fspk_lat",Lj%,",");
        Print("%s_%d%s","fspk_wdth",Lj%,",");
        if (Lj% = LNSteps%) then
            Print("\n");
        endif
    next
end
