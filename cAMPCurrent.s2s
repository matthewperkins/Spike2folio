#include "include\basic_view.s2s"      'this will bring in two globals: GVt% and GChanList%[]
#include "include\AbfStartTime.s2s"    'bring in proc AbfStartTime(vh%, FileTimeVect%[7]), has python script dependency "get_abf_start.py", and Win send .py to python.exe
#include "include\PrintHeaderStim.s2s" 'bring in PrintHeaderStim(EvntChn%, MrkChan%, delim$), where EvntChn and MrkChn are En Stim or Cbi2 stim
#include "include\FindChanName.s2s"    'this brings in FindChanName(name$, found%[]) and FilterChanType(cSpc%[], Kind%)

'''SCRIPT CONSTANTS'''
    'average the membrane potiential before the InjCurrent pulse, over this many seconds
    var avgover := 1;
    'pad the time around steps to aviod transients
    var pad := 0.05;
    'to find down, downsample data into these sized bins
    var NewBinMSec := 500;
'''END SCRIPT CONSTANTS'''

'''FILE NAMES PREP, and FILE INF PREP'''
    var GFName$, GDirString$, GFullFName$;
    var GFileTimeVec%[7];
    GFullFName$ := FileName$();
    GFName$ := Print$("%s%s",FileName$(3),FileName$(4));
    GDirString$ := Print$("%s\%s",FileName$(2),"..\\indiv_cells\\");
    AbfStartTime(GVt%, GFileTimeVec%[]);
''''END FILE NAMES PREP'''

'''vars for measures'''
    '''times'''
    var InjStart, InjEnd, TauTime; 
    '''voltages'''  
    var VmPreInj, VmInjStrt, VmInjEnd, VmPostInj, VmDltInj;
    '''currents'''
    var InjCurrent, ClmpCrntPreInj, ClmpCrntInjStrt, ClmpCrntInjEnd, ClmpCrntPostInj, ClmpCrntArea, ClmpCrntAreaNoInj, ClmpDiff;
    '''taus'''
    
var GNumSteps% := 1;
var GOutCSVVh%;
var GDelim$ := ",";
var InvE :=  0.36787944117144233;

'Select clamp channel (v)
Interact("Select Clamp VOLTAGE Channel, for mV measures", 1+2+4+8+16+32+64+128+256+512,0,"&O Okay");
var SlctdChan%[2];
var GChan%, GChanName$;
ChanList(SlctdChan%[], 65536); '65536 excludes non-selected channels
GChan% := SlctdChan%[1];
GChanName$ := ChanTitle$(GChan%);
TrimRight(GChanName$);

'Select clamp channel (I)
Interact("Select Clamp CURRENT Channel, for nA measures", 1+2+4+8+16+32+64+128+256+512,0,"&O Okay");
var GChanI%;
ChanList(SlctdChan%[], 65536); '65536 excludes non-selected channels
GChanI% := SlctdChan%[1];

'Select Injection Event Channel
Interact("Select EVENT injection channel, 00 01 marker chan a la burstmake", 1+2+4+8+16+32+64+128+256+512,0,"&O Okay");
ChanList(SlctdChan%[], 65536);
var GInjCrrEvntChan%;
GInjCrrEvntChan% := SlctdChan%[1];

'Select Injection Current Channel
Interact("Select Injection Current nA!!! channel", 1+2+4+8+16+32+64+128+256+512,0,"&O Okay");
ChanList(SlctdChan%[], 65536);
var GInjCrrChan%;
GInjCrrChan% := SlctdChan%[1];
RestoreStartView();

'Select Conditions all of them
var MultSlctChn%[10];
var NumCondChans%;
Interact("select all your on off EXperimental condition channels", 1+2+4+8+16+32+64+128+256+512, 0, "&O Okay");
ChanList(MultSlctChn%[],65536);                                            
NumCondChans% := MultSlctChn%[0];
resize MultSlctChn%[NumCondChans%+1];

'Waterfall, use boiler plate provided by help menu
var WFxoffset, WFyoffset, WFSweepSec, WFPreSec, AreaMsrSec;
WFxoffset := input("how much to xoffset waterfall sweeps?", 0);
WFyoffset := input("how much to yoffset waterfall sweeps?", 2);
WFSweepSec := input("how many seconds should each sweep be?", 90);
WFPreSec := input("how many seconds before cAMP injection start should display in water fall?", 10);
AreaMsrSec := input("Area Measure Over", 90);
'convert the Sec measures to number of data points for slicing a data array
var SecPerBin, WFLenPreDP%;
SecPerBin := BinSize(GChanI%);
WFLenPreDP% := Ceil(WFPreSec / SecPerBin);
MakeWindow%(BinSize(GChanI%),WFxoffset, WFyoffset);
View(GVt%);

'WFLenDP% := Ceil(WFSweepSec / BinSize(GChanI%));

'''get back to this later'''

'Find NumHeadrs
var NumHdrLns%;
var LnCntr%;
var NumCndLns%;
NumCndLns% := ClcNumCondLns(MultSlctChn%[]);
NumHdrLns% := NumCndLns% + 11;
LnCntr% := 9;

'Print the header for the measurements csv file
var i%;
GOutCSVVh%:= FileNew(1);
View(GOutCSVVh%).PrntHeaderTop(GDelim$, NumHdrLns%, NumCndLns%, NumCondChans%);
for i%:=1 to NumCondChans% do
    PrintHeaderCond(MultSlctChn%[i%], GVt%, GOutCSVVh%, LnCntr%, GDelim$);
    LnCntr% := LnCntr% + CountHeadrCondLins(MultSlctChn%[i%]);
next;
View(GOutCSVVh%).PrntHeaderLast(GDelim$, NumHdrLns%);
RestoreStartView();

'use marker code 0 0 0 0 for condition start
var condstartcode%[4];
ArrConst(condstartcode%[], 0);

'use marker code 1 0 0 0 for condition END
var condendcode%[4];
ArrConst(condendcode%[], 0);
condendcode%[0] := 1;

var numpulses%;
numpulses% := Count(GInjCrrEvntChan%,0,MaxTime()) / 2;

var WFwave[10000000];
var WFwaveTmp[10000000];
var WFLenDP%, InjLenDP%;

'PUT LABELED CURSORS IN VIEW
var BlLvlCurs%;
var PeakLvlCurs%;
var ThisIsTauLvlCurs%;
var MoveToTauTimeCurs%;
var GuideStartCurs%, GuideEndCurs%;

CursorDelete(-1);
HCursorDelete(-1);
BlLvlCurs% := HCursorNew(GChanI%);
PeakLvlCurs% := HCursorNew(GChanI%);
ThisIsTauLvlCurs% := HCursorNew(GChanI%);
var rng;
rng := XHigh() - XLow();
MoveToTauTimeCurs% := CursorNew(XLow()+(rng*0.95));
GuideStartCurs% := CursorNew(XLow()+(rng*0.005));
GuideEndCurs% := CursorNew(XLow()+(rng*0.01));
Draw();

HCursorLabel(4, BlLvlCurs%,"BL"); 
HCursorLabel(4, PeakLvlCurs%,"PEAK"); 
HCursorLabel(4, ThisIsTauLvlCurs%,"tau"); 
CursorLabel(4, MoveToTauTimeCurs%,"MoveMe");

ToolbarClear();
ToolbarSet(10 , "&H hide||hide selected cannels", HideChans%);
ToolbarSet(9 , "&A show orig||show all channels visible from script start", RestoreChan%);
ToolbarSet(8 , "&J frwd||jump forward", nexttest%);
ToolbarSet(7 , "&K rvsr||jump backward", lasttest%);
ToolbarSet(6 , "&F frwd||draw forward", forwarddraw%);
ToolbarSet(5 , "&R rvsr||draw backward", backwarddraw%);
ToolBarSet(4 , "&M make||make measures", mkmeasurs%);
ToolBarSet(3 , "&W write||write measures", printmeasurs%);
ToolBarSet(2 , "&T Tau||move tau cursor to the tau level", movetotau%);
ToolBarSet(1 , "&Q quit||outie 5000", outie%);
ToolbarEnable(1,1);
Toolbar("",1);

RestoreStartView();

proc PrntHeaderTop(delim$, NumHdrLns%, NumCndLns%, NumCondChans%)
    Print("%s%s%d%s%d\n","#hdr",delim$,0,delim$,NumHdrLns%);
    Print("%s%s%d%s%d\n", "##file", delim$, 1, delim$, 5);
    Print("%s%s%s\n", "file_name",delim$,GFullFName$);
    Print("%s\n", "file_start_time");
    Print("%s%s", "year", delim$);
    Print("%s%s", "month", delim$);
    Print("%s%s", "day", delim$);
    Print("%s%s", "hour", delim$);
    Print("%s%s", "minute", delim$);
    Print("%s%s", "second", delim$);
    Print("%s\n", "microsecond");
    Print("%g", GFileTimeVec%[]);
    Print("\n");
    Print("%s%s%d%s%d\n", "##cell",delim$,6,delim$,2);
    Print("%s%s%s\n", "cell_name",delim$,GChanName$);
    Print("%s%s%d%s%d%s%d\n", "##cond", delim$, 8, delim$, NumCndLns%+1, delim$, NumCondChans%);
end

proc PrntHeaderLast(delim$, NumHdrLns%)
    Print("%s%s%d%s%d\n", "##col_names", delim$, NumHdrLns%-2, delim$, 2);
    Print("%s%s","file_name",delim$);
    Print("%s%s","chan_name",delim$);
    Print("%s%s","inj_str",delim$);
    Print("%s%s","inj_end",delim$);        
    Print("%s%s","vm_pre_inj",delim$);
    Print("%s%s","vm_inj_str",delim$);
    Print("%s%s","vm_inj_end",delim$);
    Print("%s%s","vm_post_inj",delim$);
    Print("%s%s","clmp_na_pre_inj",delim$);
    Print("%s%s","clmp_na_inj_str",delim$);
    Print("%s%s","clmp_na_inj_end",delim$);
    Print("%s%s","clmp_na_post_inj",delim$);
    Print("%s%s","clmp_na_diff",delim$);
    Print("%s%s","tau_sec",delim$);
    Print("%s%s","area_nasec",delim$);
    Print("%s%s","area_nasec_post_inj",delim$);
    Print("%s","inj_crrnt");
    Print("\n");
end

func ClcNumCondLns(CondChns%[])
    var i%, LnCounter% := 0;
    for i%:=1 to CondChns%[0] do
        LnCounter% := LnCounter% + CountHeadrCondLins(CondChns%[i%]);
    next;
    return (LnCounter%);
end;

'================== Waterfall display code =====================
var WFxInc,WFyInc,WFbinSz,WFSlices%,WFvh%, TrqWFvh%;
'
'xBinSz Width of each bin (sample interval)
'xInc   Add to each slice x co-ords to give waterfall effect
'yInc   Add to each slice y co-ords to give waterfall effect
Func MakeWindow%(xBinSz, xInc, yInc)
    WFSlices% := 0;             'no slices yet
    WFxInc := xInc;             'save x increment per slice
    WFyInc := yInc;             'save y increment per slice
    WFbinSz:= xBinSz;           'save data point separation
    WFvh% := FileNew(12);       'create a new XY window (hidden)
    return WFvh%;               'return the XY window handle
end;
 
Func AddSlice(y[])          'Add data to the waterfall
    View(WFvh%);                'select the waterfall view
    var ch%:=1;                 'true if this is the first channel
    if WFSlices% = 0 then       'if first channel no need to create
       XYSetChan(1,-Len(y[]),0,1);          'set original channel
    else
       ch% := XYSetChan(0, -Len(y[]), 0, 1);'create new channel
       if (ch% <= 0) then return ch% endif; 'No more channels
    endif;
    WFSlices% := ch%;           'number of slices
    XYDrawMode(ch%,2,0);        'Hide the markers (set size of 0)
    var x[Len(y[])];            'space for x values, same size as y[]
    ArrConst(x[], WFbinSz);     'generate x axis values, set the same
    x[0]:=(ch%-1)*WFxInc;       'set x offset as first value
    ArrIntgl(x[]);              'form the x positions
    ArrAdd(y[],(ch%-1)*WFyInc); 'add the y offset to the y array
    XYAddData(ch%, x[], y[]);   'add the (x,y) data points
    return 1;                   'return >0 means all OK
end;

Func AddSliceWithZeroLine(y[], ClmpCrntPreInj)  'Add data to the waterfall
    View(WFvh%);                            'select the waterfall view
    var ch%:=1;                             'true if this is the first channel
    var zeros[Len(y[])], zch%:=99;
    var bl[Len(y[])], blch%;
    ArrConst(bl[], ClmpCrntPreInj);
    ArrConst(zeros[],0);
    ch% := XYSetChan(0, -Len(y[]), 0, 1);   'create new channel
    zch% := XYSetChan(0, -Len(y[]), 0, 1);  'create new channel
    blch% := XYSetChan(0, -Len(y[]), 0, 1);  'create new channel
    if (ch% <= 0) then return ch% endif; 'No more channels
    WFSlices% := WFSlices% + 1;             'incrmnt number of slices
    XYDrawMode(ch%,2,0);                    'Hide the markers (set size of 0)
    XYDrawMode(zch%,2,0);                   'Hide the markers (set size of 0)
    XYDrawMode(blch%,2,0);                   'Hide the markers (set size of 0)
    XYDrawMode(blch%,3,1);                   'Hide the markers (set size of 0)
    var x[Len(y[])];                        'space for x values, same size as y[]
    ArrConst(x[], WFbinSz);                 'generate x axis values, set the same
    x[0]:=(WFSlices%-1)*WFxInc;             'set x offset as first value
    ArrIntgl(x[]);                          'form the x positions
    ArrAdd(y[],(WFSlices%-1)*WFyInc);       'add the y offset to the y array
    ArrAdd(zeros[],(WFSlices%-1)*WFyInc);  'add the y offset to the y array
    ArrAdd(bl[],(WFSlices%-1)*WFyInc);  'add the y offset to the y array
    XYAddData(ch%, x[], y[]);               'add the (x,y) data points
    XYAddData(zch%, x[], zeros[]);         'add zeroline
    XYAddData(blch%, x[], bl[]);         'add zeroline
    ChanColourSet(zch%,1,0,1,0);
    ChanColourSet(blch%,1,0,0,1);
    var TauCh%;
    TauCh% := XYSetChan(0, 1, 0, 1);
    XYAddData(TauCh%, TauTime-InjEnd, ClmpDiff*InvE + ((WFSlices%-1) * WFyInc));
    XYDrawMode(TauCh%, 1, 5);
    XYDrawMode(TauCh%, 2, 10);
    ChanColourSet(TauCh%, 1, 0,0,1);
    return 1;                               'return >0 means all OK
end;

Func AddSliceBlSbtrct(y[], ClmpCrntPreInj)  'Add data to the waterfall
    View(WFvh%);                            'select the waterfall view
    var ch%:=1;                             'true if this is the first channel
    var zeros[Len(y[])], zch%:=99, tmpy[Len(y[])];
    ArrConst(tmpy[],y[]);
    ArrConst(zeros[],0);
    ch% := XYSetChan(0, -Len(y[]), 0, 1);   'create new channel
    zch% := XYSetChan(0, -Len(y[]), 0, 1);  'create new channel
    if (ch% <= 0) then return ch% endif; 'No more channels
    WFSlices% := WFSlices% + 1;             'incrmnt number of slices
    XYDrawMode(ch%,2,0);                    'Hide the markers (set size of 0)
    XYDrawMode(zch%,2,0);                   'Hide the markers (set size of 0)
    var x[Len(y[])];                        'space for x values, same size as y[]
    ArrConst(x[], WFbinSz);                 'generate x axis values, set the same
    x[0]:=(WFSlices%-1)*WFxInc;             'set x offset as first value
    ArrIntgl(x[]);                          'form the x positions
    ArrAdd(y[],((WFSlices%-1)*WFyInc)-ClmpCrntPreInj);       'add the y offset to the y array
    ArrAdd(zeros[],(WFSlices%-1)*WFyInc);  'add the y offset to the y array
    XYAddData(ch%, x[], y[]);               'add the (x,y) data points
    XYAddData(zch%, x[], zeros[]);          'add zeroline
    ChanColourSet(zch%,1,1,0,0);
    ' find center of gravity?
    ' down sample ys for 
    var IntgrStpSec := 0.5; ' bin into 100 ms groups
    var IntgrStpDP% := floor(IntgrStpSec/WFbinSz);
    var downys[Len(tmpy[])/IntgrStpDP%], i%;
    var downxs[len(downys)];
    var downch%, MeanDummy, TauCh%;
    ArrConst(downxs[], IntgrStpSec);
    ArrIntgl(downxs[]);
    for i% := 0 to (Len(tmpy[])/IntgrStpDP%)-1 do
        ArrSum(y[(IntgrStpDP% * i%):IntgrStpDP%], MeanDummy);
        downys[i%] := MeanDummy;
    next;
    TauCh% := XYSetChan(0, 1, 0, 1);
    XYAddData(TauCh%, TauTime-InjEnd, ClmpDiff*InvE + ((WFSlices%-1) * WFyInc));
    XYDrawMode(TauCh%, 1, 5);
    XYDrawMode(TauCh%, 2, 10);
    ChanColourSet(TauCh%, 1, 0,0,1);
    return 1;                               'return >0 means all OK
end;

'''''''''''''''''TOOLBAR FUNCTIONS ''''''''''''''''''''''
'THESE WILL WORK ON THE GLOBAL Cspc%[] MemChan%[]
'NOTE THESE DEPEND ON SOME OTHER GLOBELS

func forwarddraw%()
    var ttmp, rngtmp;
    'FIND RELATIVE POSITIONS OF CURSORS
    var RelPosTauTimeCurs;
    RelPosTauTimeCurs := Cursor(MoveToTauTimeCurs%) - XLow();
    
    rngtmp := XHigh()-XLow();
    ttmp := XLow() + rngtmp*0.1;
    Cursor(MoveToTauTimeCurs%,(ttmp+RelPosTauTimeCurs));
    Draw(ttmp);
return(1);
end

func backwarddraw%()
var ttmp, rngtmp;
    'FIND RELATIVE POSITIONS OF CURSORS
    var RelPosTauTimeCurs;
    RelPosTauTimeCurs := Cursor(MoveToTauTimeCurs%) - XLow();
    
    rngtmp := XHigh()-XLow();
    ttmp := XLow() - rngtmp*0.1;
    Cursor(MoveToTauTimeCurs%,(ttmp+RelPosTauTimeCurs));
    Draw(ttmp);
return(1);
end

func nexttest%()
    'want to save cursor position relative to window
    'then redraw them at the same relative position after jumping window
    var RelPosTauTimeCurs;
    RelPosTauTimeCurs := Cursor(MoveToTauTimeCurs%) - XLow();
    
    'want to save window position relative to the start of the test
    'then redraw new window at same relative position
    'if there is no exct test start mark in view, default to 20 % offset
    var RelPosWin, rngtmp;
    rngtmp := XHigh() - XLow();
    RelPosWin := XLow() - NextTime(GInjCrrEvntChan%, XLow(), condstartcode%);
    if (Abs(RelPosWin) > rngtmp) then
        RelPosWin := rngtmp * -0.2;
    endif;

    'find next time and draw window and cursors
    var ttmp;
    ttmp := GetNextExctCode(GInjCrrEvntChan%, XLow(), condstartcode%);
    ttmp := GetNextExctCode(GInjCrrEvntChan%, ttmp, condstartcode%);
    ttmp := ttmp + RelPosWin;
    Cursor(MoveToTauTimeCurs%,(ttmp+RelPosTauTimeCurs));
    Draw(ttmp);
    return(1);
end

func lasttest%()
    'want to save cursor position relative to window
    'then redraw them at the same relative position after jumping window
    var RelPosTauTimeCurs;
    RelPosTauTimeCurs := Cursor(MoveToTauTimeCurs%) - XLow();
    
    'want to save window position relative to the start of the test
    'then redraw new window at same relative position
    'if there is no exct test start mark in view, default to 20 % offset
    var RelPosWin, rngtmp;
    rngtmp := XHigh() - XLow();
    RelPosWin := XLow() - NextTime(GInjCrrEvntChan%, XLow(), condstartcode%[]);
    if (Abs(RelPosWin) > rngtmp) then
        RelPosWin := rngtmp * -0.2;
    endif;


    'find next time and draw window and cursors
    var ttmp;
    ttmp := GetLastExctCode(GInjCrrEvntChan%, XLow(), condstartcode%[]);
    ttmp := ttmp + RelPosWin;
    Cursor(MoveToTauTimeCurs%,(ttmp+RelPosTauTimeCurs));
    Draw(ttmp);
    return(1);
end

func movetotau%()
    var bl, peak, taulvl;
    bl := HCursor(BlLvlCurs%);
    peak := HCursor(PeakLvlCurs%);
    taulvl := bl + (peak-bl)*InvE;
    HCursor(ThisIsTauLvlCurs%, taulvl); 
    return (1)
end

func mkmeasurs%()
    ' Get Times and compute DP lengths
    InjStart := GetNextExctCode(GInjCrrEvntChan%, XLow(), condstartcode%[]);
    InjEnd := GetNextExctCode(GInjCrrEvntChan%, InjStart, condendcode%[]);
    ' move to cursors into place just so its clear that everything is working
    Cursor(GuideStartCurs%, InjStart);
    Cursor(GuideEndCurs%, InjEnd);
    Draw();
    InjLenDP% := Ceil((InjEnd-InjStart)/SecPerBin);
    WFLenDP% := ChanData(GChanI%, WFwave[], InjStart - WFPreSec, InjStart - WFPreSec + WFSweepSec);
    ' Clamp, Vm measures
    VmPreInj := ChanMeasure(GChan%,2,InjStart-avgover-pad, InjStart-pad);
    VmInjStrt := ChanMeasure(GChan%,2,InjStart+pad, InjStart+avgover+pad);
    VmInjEnd := ChanMeasure(GChan%,2,InjEnd-avgover-pad, InjEnd-pad);
    VmPostInj := ChanMeasure(GChan%,2,InjEnd+pad, InjEnd+avgover+pad);
    ' Clamp, I measures, I want to do these inteactively with cursors
    ClmpCrntPreInj := HCursor(BlLvlCurs%);
    ClmpCrntInjStrt:= ChanMeasure(GChanI%,2,InjStart+pad, InjStart+avgover+pad);
    ClmpCrntInjEnd:= ChanMeasure(GChanI%,2,InjEnd-avgover-pad, InjEnd-pad);
    ClmpCrntPostInj:= HCursor(PeakLvlCurs%);
    ClmpDiff := ClmpCrntPostInj - ClmpCrntPreInj;
    ' Injection Current measure
    InjCurrent := ChanMeasure(GInjCrrChan%,2,InjStart, InjEnd);
    'Area measurements 
    'first copy WFwave to a temp, so can manipulate
    ArrConst(WFwaveTmp[],WFwave[]);
    ArrSub(WFwaveTmp[], ClmpCrntPreInj);
    ClmpCrntArea := ArrSum(WFwaveTmp[]);
    ClmpCrntAreaNoInj := ArrSum(WFwaveTmp[(WFLenPreDP% + InjLenDP%):]);
    ' finding Time at which change falls below 1/e
    TauTime := Cursor(MoveToTauTimeCurs%);
    AddSliceWithZeroLine(WFwave[:WFLenDP%], ClmpCrntPreInj);
    View(GVt%);
    return (1);
end

func printmeasurs%()
    View(GOutCSVVh%);
    Print("%s%s",GFName$,GDelim$);
    Print("%s%s",GChanName$,GDelim$);
    Print("%.4f%s",InjStart,GDelim$);
    Print("%.4f%s",InjEnd,GDelim$);        
    Print("%.4f%s",VmPreInj,GDelim$);
    Print("%.4f%s",VmInjStrt,GDelim$);
    Print("%.4f%s",VmInjEnd,GDelim$);
    Print("%.4f%s",VmPostInj,GDelim$);     
    Print("%.4f%s",ClmpCrntPreInj,GDelim$);
    Print("%.4f%s",ClmpCrntInjStrt,GDelim$);
    Print("%.4f%s",ClmpCrntInjEnd,GDelim$);
    Print("%.4f%s",ClmpCrntPostInj,GDelim$);
    Print("%.4f%s",ClmpDiff,GDelim$);
    Print("%.4f%s",TauTime,GDelim$);
    Print("%.4f%s",ClmpCrntArea,GDelim$);
    Print("%.4f%s",ClmpCrntAreaNoInj,GDelim$);
    Print("%.4f",InjCurrent);
    Print("\n");
    View(GVt%);
    return(1)
end 

func HideChans%()
    ChanHide(-3);
    return (1)
end

func RestoreChan%()
    RestoreStartView();
    return(1)
end

func outie%()
    return(0);
end

func GetNextExctCode(chan%, time, code%[])
    var nextcode%[4];
    var codematch% := 1; 'codematch will be zero when match found
    while (codematch%=1) do
        time := NextTime(chan%,time,nextcode%);
        ArrSub(nextcode%[], code%[]);
        codematch% := ArrSum(nextcode%[]);
        if (time=-1) then break endif;
    wend;
    return time
end

func GetLastExctCode(chan%, time, code%[])
    var nextcode%[4];
    var codematch% := 1; 'codematch will be zero when match found
    while (codematch%=1) do
        time := LastTime(chan%,time,nextcode%);
        ArrSub(nextcode%[], code%[]);
        codematch% := ArrSum(nextcode%[]);
        if (time=-1) then break endif;
    wend;
    return time
end

