'want to have a protraction level channel, and a retraction level channel.

'the protraction level channel will be automatically created by burst make on i2
'the rectraciton level channel will be created using B48 or B67's post retraction burst
'consider adding a hyper retraction phase too, (not now though)

'edit items

#include "include\basic_view.s2s"     'this will bring in two globals: GVt% and GChanList%[]
#include "include\marker_code_iter.s2s"     'this will bring in marker chan function GetNextCode, GetLastCode, and CountBrsts

var i2burst%;
var SnglSlctChn%[2];

'SELECT i2 burst channel 
Interact("Select chan protraction burst channel", 65536, 0, "&O Okay");
ChanList(SnglSlctChn%, 65536);
i2burst% := SnglSlctChn%[1];

'construct retractions
var prostart := 0;
var proend := 0;
var restart := 0;
var reend := 0;
var retraction%;
var protraction%;
var i%;
retraction% := MemChan(5);
protraction% := CopyWave%(i2burst%);

'get the number of i2 bursts:
var numi2bursts%;
numi2bursts%:= CountBrsts(i2burst%, 0, MaxTime());

'START TO GET into trouble when next protraction burst comes before retraction,
'need to handle this case
var nxtprostart;
var RetrctCurs%;

'copy all protraction ends into retraction channel as starts 
'mask starts on protraction channel
MarkMask(protraction%,0,0,1);
MemImport(retraction%, protraction%, 0, MaxTime());
MarkSet(retraction%, 0, MaxTime(), startcode%[]);
'unmask protraction
MarkMask(protraction%,-1,1,-1);
'just make sure retraction is drawing as a state

AddChanToStartView(retraction%);
AddChanToStartView(protraction%);
ChanTitle$(protraction%,"protraction");
ChanTitle$(retraction%,"retraction");
DrawMode(protraction%,15,0,0,2);
DrawMode(retraction%,15,0,0,2);
MarkShow(protraction%,0,1);
MarkShow(retraction%,0,1);
RestoreStartView();

' do the rest in my edit float script

func CopyWave%(chan%) 
    var mc%;
    mc% := MemChan(0, chan%);                'Create waveform channel
    if mc%>0 then                            'Created OK?
       ChanComment$(mc%, "Copy of channel "+Str$(chan%));
       MemImport(mc%, chan%, 0, MaxTime());  'Copy data
    endif;
    DrawMode(mc%, 15, 0, 0, 2);
    MarkShow(mc%,0,1);
    return mc%; 'Return the new memory channel number
end;