var istart, iend, stime, stepe, viewtemp%, isokay%, exportchanno%, padcurrentpulse, numpulses%;
var peakampl, icmndchanno%;

viewtemp% := View(0);  'Save the current view
View(viewtemp%);         'restore the original view
DrawAll();
FrontView(viewtemp%);


icmndchanno% := Input("command current on which cannel?", 3); '7;
numpulses% := Input("how many pulses do you want?", 1);
exportchanno% := Input("export which cannel?", 9); '7;
padcurrentpulse := Input("pad current pulse with how many seconds ?", 1.5); '1.5

'Make Virtual Channel to hold rectified current pulses
var vchan%, thresh, i%;
vchan% := makerectslpchan(icmndchanno%);
HCursorDelete(-1);
HCursorNew(vchan%);
ChanHide(-1);
ChanShow(vchan%); ChanShow(exportchanno%);
Optimise(vchan%); Optimise(exportchanno%);
FrontView(viewtemp%);
Interact("Thresh",2);
thresh := HCursor(1);

'Get File Names Ready
var fname$, rdirstring$, outnamebase$, outnameiter$;
fname$ := Print$("%s%s",FileName$(3),FileName$(4));
rdirstring$ := Print$("%s\%s",FileName$(2),fname$);
outnamebase$ := "sample_trace";

'Deal with cursors
var precur%, endcur%;
CursorDelete(1);
CursorDelete(2);
CursorActive(0, 4, vchan%, 0.1, "", "", thresh);
CursorVisible(0);
precur% := CursorNew(Cursor(0),1);
endcur% := CursorNew(Cursor(0),2);
CursorActive(endcur%, 4,    vchan%, "Cursor(0)+0.02", "MaxTime()", "10",  thresh);
             'cursnum , mode, chan  , start here      , search max time  , r if fails ,  search threshold
CursorActive(precur%, 4, vchan%, "Cursor(0)+0.02", "0", "10",  thresh);

'get toolbar ready
var breaksampls%:=0;

PrintLog("start\t");
PrintLog("end\t");

for i% := 1 to numpulses% do
    CursorSearch(0);
    CursorSearch(1);
    CursorSearch(2);
    istart := Cursor(1);
    iend := Cursor(2);
    Draw(istart-padcurrentpulse,((istart-iend)+2*padcurrentpulse));
    ToolbarClear();
    ToolbarSet(6,"&o frwd||jump forward one view width", forwarddraw%);
    ToolbarSet(5,"&a rvsr||jump backward one view width", backwarddraw%);
    ToolbarSet(4,"&u fwrdSrch||search forward", scurfor%);
    ToolbarSet(3,"&e rvsSrch||search reverse", ecurfor%);
    ToolbarSet(2,"&p HALT||stop sample getting", stopsmpls%);
    ToolBarSet(1,"&k OKAY||save eventchannels and leave",outie%);
    ToolbarEnable(1,1);
    Toolbar("",1);
    istart := Cursor(1);
    iend := Cursor(2);
    if (breaksampls%) then break; endif
        ExportChanList(1);            'Clear export list, sets zero shift
        ExportChanList(istart-padcurrentpulse, iend+padcurrentpulse, exportchanno%); 'set channels to export
        ExportTextFormat();           'reset the file dump dialog
        ExportTextFormat(0, 0, 1);    'No header or summary
        FilePathSet(rdirstring$);
        outnameiter$ := Print$("%s_%s_%g.csv",ChanTitle$(exportchanno%),outnamebase$,i%);
        FileSaveAs(outnameiter$,1);   
next
iend := Cursor(1);

'ChanDelete(vchan%);

func makerectslpchan(chan%)
    var expr$, vchan%;
    vchan% := MemChan(0, chan%);
    MemImport(vchan%, chan%, 0.0, MaxTime()); 'Create channel copy
    ChanProcessAdd(vchan%,3,0.001);
    ChanProcessAdd(vchan%,0);
    return vchan%;
end

proc setchantitle(inchan%, outchan%, appendstring$)
    var tmpchantit$;
    tmpchantit$ := ChanTitle$(inchan%);
    tmpchantit$ := Print$("%s_%s",Left$(tmpchantit$,5),appendstring$);
    ChanTitle$(outchan%,tmpchantit$);
end

'TOOLBAR FUNCTION 

ToolbarSet(7,"&f frwd||jump forward one view width", forwarddraw%);
ToolbarSet(6,"&r rvsr||jump backward one view width", backwarddraw%);
ToolbarSet(5,"&l fsSrch||search forward with start cursor", scurfor%);
ToolbarSet(3,"&j feSrch||search forward with end cursor", ecurfor%);
ToolbarSet(1,"&p HALT||stop sample getting", stopsmpls%);
ToolBarSet(1,"&r OKAY||save eventchannels and leave",outie%);

func forwarddraw%()
var ttmp, rngtmp;
    rngtmp := XHigh()-XLow();
    ttmp := XLow() + rngtmp*0.75;
    Cursor(0,(ttmp+rngtmp*0.5));Cursor(precur%,(ttmp+rngtmp*0.2));Cursor(endcur%,(ttmp+rngtmp*0.4));
    Draw(ttmp);
return(1);
end

func backwarddraw%()
var ttmp, rngtmp;
    rngtmp := XHigh()-XLow();
    ttmp := XLow() - rngtmp*0.75;
    Cursor(0,(ttmp+rngtmp*0.5));Cursor(precur%,(ttmp+rngtmp*0.2));Cursor(endcur%,(ttmp+rngtmp*0.4));
    Draw(ttmp);
return(1);
end

func scurfor%()
    CursorSearch(0);
    Draw();
    return(1);
end

func ecurfor%()
    CursorSearch(-1);
    Draw();
    return(1);
end

func stopsmpls%()
    breaksampls% := 1;
    return(0);
end

func outie%()
    return(0);
end
