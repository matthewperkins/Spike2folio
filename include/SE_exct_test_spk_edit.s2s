''' this script is meant to be included in other scripts as a module'''
''' because of the toolbar functions it works on globals'''
''' these globals are named starting with a G...'''

var GChan%;
var GEventChan%;
var GCurrMrkChan%;

func SEExctTestEditSpks(GEventChan%, GChan%, GCurrMrkChan%)
    var LStartOver% := 0;
    makeeventcursors(3);
    ToolbarSet(9,"&K last_test||jump to the the previous current step excit test", lasttest%);
    ToolbarSet(8, "&J nxt_test||jump to the the next current step excit test", nexttest%);
    ToolbarSet(7,"&F Forward||Jump view and cursors forward", forwarddraw%);
    ToolbarSet(6,"&R Backward||Jump view and cursors backward", backwarddraw%);
    ToolbarSet(5,"&A add||add a spikes at add cursor", addspk%);
    ToolbarSet(4,"&E delone||del spk nearest del cursor1", delonespk%);
    ToolbarSet(3,"&U delbtwn||del all spks btwn two del cursors", delspksbtw%);
    ToolbarSet(2,"$&Q quit", outie%);
    ToolbarEnable(1,1);
    Toolbar("",1);
    LStartOver% := Interact("Happy?",1,0,"&Y Yes","&N No");
    return LStartOver%;
end

'Spike editing toolbar functions'

    func addspk%()
        MemSetItem(GEventChan%,0, Cursor(7));
    return(1);
    end

    func delonespk%()
        MemDeleteTime(GEventChan%,0,Cursor(8),5);
        Draw();
    return(1);
    end

    func delspksbtw%()
        MemDeleteTime(GEventChan%,3,Cursor(8),Cursor(9));
        Draw();
    return(1);
    end

    func outie%()
    return(0);
    end

    func forwarddraw%()
    var ttmp, rngtmp;
        rngtmp := XHigh()-XLow();
        ttmp := XLow() + rngtmp*0.1;
        Cursor(7,(ttmp+rngtmp*0.2));Cursor(8,(ttmp+rngtmp*0.4));Cursor(9,(ttmp+rngtmp*0.6));
        Draw(ttmp);
    return(1);
    end

    func backwarddraw%()
    var ttmp, rngtmp;
        rngtmp := XHigh()-XLow();
        ttmp := XLow() - rngtmp*0.1;
        Cursor(7,(ttmp+rngtmp*0.2));Cursor(8,(ttmp+rngtmp*0.4));Cursor(9,(ttmp+rngtmp*0.6));
        Draw(ttmp);
    return(1);
    end

    func nexttest%()
        'use marker code 0 0 0 0 for condition start
        var condstartcode%[4];
        ArrConst(condstartcode%[], 0);

        'use marker code 1 0 0 0 for condition END
        var condendcode%[4];
        ArrConst(condendcode%[], 0);
        condendcode%[0] := 1;


        'zerod array for next marker code
        var nextcode%[4];
        ArrConst(condendcode%[], 0);

        'want to save cursor position relative to window
        'then redraw them at the same relative position after jumping window
        var RelPosAdd, RelPosDel, RelPosDel2;
        RelPosAdd := Cursor(7) - XLow();
        RelPosDel := Cursor(8) - XLow();
        RelPosDel2 := Cursor(9) - XLow();

        'want to save window position relative to the start of the test
        'then redraw new window at same relative position
        'if there is no exct test start mark in view, default to 20 % offset
        var RelPosWin, rngtmp;
        rngtmp := XHigh() - XLow();
        RelPosWin := XLow() - NextTime(GCurrMrkChan%, XLow(), condstartcode%);
        if (Abs(RelPosWin) > rngtmp) then
            RelPosWin := rngtmp * -0.2;
        endif;
    
        'find next time and draw window and cursors
        var ttmp;
        ttmp := GetNextExctCode(GCurrMrkChan%, XHigh(), condstartcode%);
        ttmp := ttmp + RelPosWin;
        Cursor(7,(ttmp+RelPosAdd));Cursor(8,(ttmp+RelPosDel));Cursor(9,(ttmp+RelPosDel2));
        Draw(ttmp);
    return(1);
    end

    func lasttest%()
        'use marker code 0 0 0 0 for condition start
        var condstartcode%[4];
        ArrConst(condstartcode%[], 0);

        'use marker code 1 0 0 0 for condition END
        var condendcode%[4];
        ArrConst(condendcode%[], 0);
        condendcode%[0] := 1;

        'want to save cursor position relative to window
        'then redraw them at the same relative position after jumping window
        var RelPosAdd, RelPosDel, RelPosDel2;
        RelPosAdd := Cursor(7) - XLow();
        RelPosDel := Cursor(8) - XLow();
        RelPosDel2 := Cursor(9) - XLow();

        'want to save window position relative to the start of the test
        'then redraw new window at same relative position
        'if there is no exct test start mark in view, default to 20 % offset
        var RelPosWin, rngtmp;
        rngtmp := XHigh() - XLow();
        RelPosWin := XLow() - NextTime(GCurrMrkChan%, XLow(), condstartcode%);
        if (Abs(RelPosWin) > rngtmp) then
            RelPosWin := rngtmp * -0.2;
        endif;

    
        'find next time and draw window and cursors
        var ttmp;
        ttmp := GetLastExctCode(GCurrMrkChan%, XLow(), condstartcode%[]);
        ttmp := ttmp + RelPosWin;
        Cursor(7,(ttmp+RelPosAdd));Cursor(8,(ttmp+RelPosDel));Cursor(9,(ttmp+RelPosDel2));
        Draw(ttmp);
    return(1);
    end
'End toolbar functions'

Proc makeeventcursors(n%)
    var i%, range := XHigh()-XLow();
    var divi, divn := n%;
    var startcurnum% := 9-n%;
    for i% := 1 to n% do
        divi := i%;
        CursorNew(XLow()+(range*0.8*(divi/divn)), startcurnum%+i%);
    next
    CursorLabel(4, 7, "add"); CursorLabelPos(1,20);
    CursorLabel(4, 8,"delete1"); CursorLabelPos(2,20);
    CursorLabel(4, 9,"delete2"); CursorLabelPos(3,20);
end

func GetNextExctCode(chan%, time, code%[])
    var nextcode%[4];
    var codematch% := 1; 'codematch will be zero when match found
    while (codematch%=1) do
        time := NextTime(chan%,time,nextcode%);
        ArrSub(nextcode%[], code%[]);
        codematch% := ArrSum(nextcode%[]);
        if (time=-1) then break endif;
    wend;
    return time
end

func GetLastExctCode(chan%, time, code%[])
    var nextcode%[4];
    var codematch% := 1; 'codematch will be zero when match found
    while (codematch%=1) do
        time := LastTime(chan%,time,nextcode%);
        ArrSub(nextcode%[], code%[]);
        codematch% := ArrSum(nextcode%[]);
        if (time=-1) then break endif;
    wend;
    return time
end