'''' Rin measurements for experiments where doing coupling measures
'''' BORROWED ENTIRELY FOR ExtrctMsrsDR
#include "include\basic_view.s2s"      'this will bring in two globals: GVt% and GChanList%[]
#include "include\AbfStartTime.s2s"    'bring in proc AbfStartTime(vh%, FileTimeVect%[7]), has python script dependency "get_abf_start.py", and Win send .py to python.exe
#include "include\PrintHeaderStim.s2s" 'bring in PrintHeaderStim(EvntChn%, MrkChan%, delim$), where EvntChn and MrkChn are En Stim or Cbi2 stim
#include "include\FindChanName.s2s"    'this brings in FindChanName(name$, found%[]) and FilterChanType(cSpc%[], Kind%)
#include "include\marker_code_iter.s2s"     'brings in startcode%[4], endcode%[4], GetNextCode(), GetLastCode() and CountBrsts()
#include "include\FindRMP.s2s"
#include "include\SpkWdth.s2s"
'''SCRIPT CONSTANTS'''
    'average the membrane potiential before the current pulse, over this many seconds
    var avgover;
    avgover := 0.2;
'''END SCRIPT CONSTANTS'''


'''FILE NAMES PREP, and FILE INF PREP'''
    var GFName$, GDirString$, GFullFName$;
    var GFileTimeVec%[7];
    GFullFName$ := FileName$();
    GFName$ := Print$("%s%s",FileName$(3),FileName$(4));
    GDirString$ := Print$("%s\%s",FileName$(2),"..\\indiv_cells\\");
    AbfStartTime(GVt%, GFileTimeVec%[]);
'''END FILE NAMES PREP'''

'''vars for measures'''
    var stepstart, stepend, vstprmp, vstpi, vstpdelt, current, HoldCurr, CurrDelta;
    var numspks%, spklaten, fspkwdth, trsharry[200], tau;

var GNumSteps% := 1;
var GOutCSVVh%;
var GDelim$ := ",";

'FIRST do my channel selections:
'Select Pre Synaptic Cell
var PreSynCellmVChn% ;
var PreSynCellName$;
var PreSynCellSpkChn%;
var PreSynCellnAChn%;
var PreSynCellnABrstChn%;

' Post Synaptic Cells
var PostSynCellmVChnAr%[5];
var PostSynCellSpkChnAr%[5];
var NumPostSynCell%;

Interact("select all the PostSynaptic Cells", 65536, 0, "&O Okay");
ChanList(PostSynCellmVChnAr%[],65536);                                            
NumPostSynCell% := PostSynCellmVChnAr%[0];
resize PostSynCellmVChnAr%[NumPostSynCell%+1];

'For each pre synaptic cell, need to get a spike event channel, a nA channel and a nA brst channel. 
'For each post synaptic cell, need to get a spike event channel, could loop through and prompt to select.

'Select intracell channel
Interact("Select Pre Synaptic Cell", 1+2+4+8+16+32+64+128+256+512,0,"&O Okay");
var SlctdChan%[2];
var GChan%, GChanName$;
ChanList(SlctdChan%[], 65536); '65536 excludes non-selected channels
GChan% := SlctdChan%[1];
GChanName$ := ChanTitle$(GChan%);
TrimRight(GChanName$);

'Select Event Channel
Interact("Select Pre Synaptic Event Channel, that has spike events", 1+2+4+8+16+32+64+128+256+512,0,"&O Okay");
var GEventChan%;
ChanList(SlctdChan%[], 65536);
GEventChan% := SlctdChan%[1];

'Select Current Pulse Event Channel
Interact("Select EVENT Current pulse channel, 00 01 marker chan a la burstmake", 1+2+4+8+16+32+64+128+256+512,0,"&O Okay");
ChanList(SlctdChan%[], 65536);
var GCrrEvntChan%;
GCrrEvntChan% := SlctdChan%[1];

'Select Current Channel
Interact("Select Current nA!!! channel", 1+2+4+8+16+32+64+128+256+512,0,"&O Okay");
ChanList(SlctdChan%[], 65536);
var GCrrChan%;
GCrrChan% := SlctdChan%[1];
RestoreStartView();

'Select Conditions all of them
var MultSlctChn%[10];
var NumCondChans%;
Interact("select all your on off EXperimental condition channels", 65536, 0, "&O Okay");
ChanList(MultSlctChn%[],65536);                                            
NumCondChans% := MultSlctChn%[0];
resize MultSlctChn%[NumCondChans%+1];

'Find NumHeadrs
var NumHdrLns%;
var LnCntr%;
var NumCndLns%;
NumCndLns% := ClcNumCondLns(MultSlctChn%[]);
NumHdrLns% := NumCndLns% + 11;
LnCntr% := 9;

'Print the header for the measurements csv file
var i%;
GOutCSVVh%:= FileNew(1);
View(GOutCSVVh%).PrntHeaderTop(GDelim$, NumHdrLns%, NumCndLns%, NumCondChans%);
for i%:=1 to NumCondChans% do
    PrintHeaderCond(MultSlctChn%[i%], GVt%, GOutCSVVh%, LnCntr%, GDelim$);
    LnCntr% := LnCntr% + CountHeadrCondLins(MultSlctChn%[i%]);
next;
View(GOutCSVVh%).PrntHeaderLast(GDelim$, NumHdrLns%);
RestoreStartView();

'Find RMP
var GRMP;
GRMP := FindRMP(GChan%);
    
var numpulses%;
numpulses% := CountBrsts(GCrrEvntChan%, 0, MaxTime());

for i% := 1 to numpulses% do
    stepstart := GetNextCode(GCrrEvntChan%, stepend, startcode%[]);
    stepend := GetNextCode(GCrrEvntChan%, stepstart, endcode%[]);
    mkmeasurs(GChan%, GCrrChan%, GEventChan%);
    View(GOutCSVVh%).printmeasurs(GDelim$);
next;

proc mkmeasurs(chanvolts%,chancurrent%,chanspks%)
    vstprmp := ChanMeasure(chanvolts%,2,stepstart-avgover, stepstart);
    vstpi := ChanMeasure(GChan%,2,stepend-avgover, stepend);
    vstpdelt := vstpi - vstprmp;
    HoldCurr := ChanMeasure(chancurrent%, 2, stepstart-avgover, stepstart - 0.001); ' give a small pad on the current measure
    current := ChanMeasure(chancurrent%,2,stepstart, stepend);
    CurrDelta := current - HoldCurr;
    numspks% := ChanData(chanspks%, trsharry[], stepstart, stepend);
    if (numspks%) then 
        spklaten := NextTime(chanspks%, stepstart);
        fspkwdth := SpkWdth(chanvolts%, spklaten, GRMP, 0.63);
        spklaten := spklaten - stepstart;
    else
        spklaten := -1;
    endif
    'search for spikes
end

proc printmeasurs(delim$)
    Print("%s%s",GFName$,delim$);
    Print("%s%s",GChanName$,delim$);
    Print("%.4f%s",stepstart,delim$);
    Print("%.4f%s",stepend,delim$);        
    Print("%.4f%s",vstprmp,delim$);
    Print("%.4f%s",vstpi,delim$);
    Print("%.4f%s",vstpdelt,delim$);
    Print("%.4f%s",HoldCurr,delim$);
    Print("%.4f%s",current,delim$);
    Print("%.4f%s",CurrDelta,delim$);
    Print("%d%s",numspks%,delim$);
    Print("%.4f%s",spklaten,delim$);
    Print("%.4f",fspkwdth);
    Print("\n");
end 

'want to change the way I do header, and split the header into a structured sub-sections
''''''''''''''' shoot for something like this ''''''''''''''''
'#hdr,0,14                                    '''the header headr will be like: "#hdr, line_start, length" 
'#file,1,5                                       '''each subsection will have a mini-header: "#section, line_start, length" (index to 0 as start)
'file_name,D:\weiss_lab\...
'file_start_time
'year,month,day,hour,minute,second,microsecond,
'2012,3,23,13,59,19,281000
'#cell,6,2
'cell_name,b48R
'#cond,8,5
'##cond
'SCP_20nMstart,SCP_20nMend,
'1166.4031,1437.9237
'##cond                                         '''have nested ##cond tags for each conidition, even if only have 1
'SCP_20nMstart,SCP_20nMend,
'1754.8431,2035.0941
'#col_names,14,2
'file_name,chan_name,stpstart,stpend,vstp_rmp,vstp_i,vstp_delt,crnt_mntr,num_spks,fspk_lat,fspk_wdth,

proc PrntHeaderTop(delim$, NumHdrLns%, NumCndLns%, NumCondChans%)
    Print("%s%s%d%s%d\n","#hdr",delim$,0,delim$,NumHdrLns%);
    Print("%s%s%d%s%d\n", "##file", delim$, 1, delim$, 5);
    Print("%s%s%s\n", "file_name",delim$,GFullFName$);
    Print("%s\n", "file_start_time");
    Print("%s%s", "year", delim$);
    Print("%s%s", "month", delim$);
    Print("%s%s", "day", delim$);
    Print("%s%s", "hour", delim$);
    Print("%s%s", "minute", delim$);
    Print("%s%s", "second", delim$);
    Print("%s\n", "microsecond");
    Print("%g", GFileTimeVec%[]);
    Print("\n");
    Print("%s%s%d%s%d\n", "##cell",delim$,6,delim$,2);
    Print("%s%s%s\n", "cell_name",delim$,GChanName$);
    Print("%s%s%d%s%d%s%d\n", "##cond", delim$, 8, delim$, NumCndLns%+1, delim$, NumCondChans%);
end

proc PrntHeaderLast(delim$, NumHdrLns%)
    Print("%s%s%d%s%d\n", "##col_names", delim$, NumHdrLns%-2, delim$, 2);
    Print("%s%s","file_name",delim$);
    Print("%s%s","chan_name",delim$);
    Print("%s%s","stpstart",delim$);
    Print("%s%s","stpend",delim$);        
    Print("%s%s","vstp_rmp",delim$);
    Print("%s%s","vstp_i",delim$);
    Print("%s%s","vstp_delt",delim$);
    Print("%s%s","hold_nA",delim$);
    Print("%s%s","step_nA",delim$);
    Print("%s%s","delta_nA",delim$);
    Print("%s%s","num_spks",delim$);
    Print("%s%s","fspk_lat",delim$);
    Print("%s","fspk_wdth");
    Print("\n");
end

func ClcNumCondLns(CondChns%[])
    var i%, LnCounter% := 0;
    for i%:=1 to CondChns%[0] do
        LnCounter% := LnCounter% + CountHeadrCondLins(CondChns%[i%]);
    next;
    return (LnCounter%);
end;



