'protraction channel
'retraction channel
'first select protractions and retraction channels
'SELECT i2 burst channel 
#include "..\include\basic_view.s2s"     'this will bring in two globals: GVt% and GChanList%[]
#include "..\include\AbfStartTime.s2s"    'bring in proc AbfStartTime(vh%, FileTimeVect%[7]), has python script dependency "get_abf_start.py", and Win send .py to python.exe
#include "..\include\PrintHeaderStim.s2s" 'bring in PrintHeaderStim(EvntChn%, MrkChan%, delim$), where EvntChn and MrkChn are En Stim or Cbi2 stim

var protraction%;
var SnglSlctChn%[2];

'SELECT protraction channel
    Interact("Select chan protraction channel", 65536, 0, "&O Okay");
    ChanList(SnglSlctChn%, 65536);                              
    protraction%:= SnglSlctChn%[1];
    ChanTitle$(protraction%,"prtrct");

'SELECT a retraction channel
    var retraction%;
    Interact("retraction channel", 65536, 0, "&O Okay");
    ChanList(SnglSlctChn%, 65536);
    retraction%:= SnglSlctChn%[1];
    ChanTitle$(retraction%,"retrct");

'SELECT a trig stim
    var stimulustrigger%;
    Interact("stimulus channel", 65536, 0, "&O Okay");
    ChanList(SnglSlctChn%, 65536);
    stimulustrigger%:= SnglSlctChn%[1];

'Select any ON Off condition channels 
    var CondChns%[10];
    var NumCondChans%;
    Interact("select and On Off Condition channels", 65536, 0, "&O Okay");
    ChanList(CondChns%[], 65536);
    NumCondChans% := CondChns%[0];

'SELECT a measurement channels
    var MultSlctChn%[10];
    var NumMsrChans%;
    Interact("select all your measurement channels", 65536, 0, "&O Okay");
    ChanList(MultSlctChn%[],65536);
    NumMsrChans% := MultSlctChn%[0];
    resize MultSlctChn%[NumMsrChans%+1];

'''FILE NAMES PREP, and FILE INF PREP'''
    var GFName$, GDirString$, GFullFName$;
    var GFileTimeVec%[7];
    var NumHeaders%;
    GFullFName$ := FileName$();
    GFName$ := Print$("%s%s",FileName$(3),FileName$(4));
    GDirString$ := Print$("%s\%s",FileName$(2),"..\\indiv_cells\\");
    AbfStartTime(GVt%, GFileTimeVec%[]);

    'CREATE measurement views/files
    'specify the number of headers in the file psuedomanually!!!'
    NumHeaders% := ClcNumHdrLns(CondChns%[],6);
    var GDelim$ := ",";
    var GCsvView%;
    GCsvView% := FileNew(1);
    PrepHeadersTop(GCsvView%, NumHeaders%, GFName$);
    PrepHeaderStim(CondChns%[], GCsvView%, GDelim$);
    PrepHeaderBtm(GCsvView%);

'instead of looping over protraction starts,
'just spit out a row for each measure:
'      :  col1  ,  col2  ,  col3  
'HDR1  : nm_hrs ,   9    
'HDR2  :  ...   ,  ...
'LSTHDR: measur , count  , times
'DAT1  :pro_strt, nm_vnts,12.1  , 40.3 , 50.9 , ...
'DAT2  :pro_end , nm_vnts, 30.2 , 60.8 , ...
'DAT1  : re_strt, nm_vnts, 30.2 , 60.8 , ...
'DAT2  : re_end , nm_vnts, 34   , 67   , ...
'DAT3  :  b48L  , nm_vnts, spk  , time

'PREPARE MARKER MASKS FOR MY EVENT CHANNELS
'work flow going to be mask channel first if necessary, then pass masked channel to WrtEvntTms

'WRITE STIMULUS TO CSV
    WrtOnOffMrkChn(stimulustrigger%, GCsvView%);

'PROTRACTION TO CSV
    WrtOnOffMrkChn(protraction%, GCsvView%);

'RETRACTION TO CSV
    WrtOnOffMrkChn(retraction%, GCsvView%);

'CELLS TO CSV
    var i%;
    for i% := 1 to MultSlctChn%[0] do
        WrtEvntTms(MultSlctChn%[i%], GCsvView%);
    next;

proc WrtOnOffMrkChn(OnOffMrkChn%, CsvView%)
    MskStrts(OnOffMrkChn%);
    WrtEvntTms(OnOffMrkChn%, CsvView%);
    MskEnds(OnOffMrkChn%);
    WrtEvntTms(OnOffMrkChn%, CsvView%);
    MarkMask(OnOffMrkChn%, -1, 1, -1);
end

proc WrtEvntTms(chan%, CsvView%)
    var EvntTms[20000];
    var NmEvnts%;
    var ChnTtl$;
    NmEvnts% := ChanData(chan%, EvntTms[], 0, MaxTime());
    ChnTtl$ := ChanTitle$(chan%);
    resize EvntTms[NmEvnts%];
    View(CsvView%);
    Print("%s,",ChnTtl$);
    Print("%d,",NmEvnts%);
    Print("%.4f",EvntTms[]);
    Print("\n");
    View(GVt%);
end

'PROCS AND FUNCTIONS 
proc MskStrts(chan%)
    var startmask%[256];
    ArrConst(startmask%[], 0);
    startmask%[0] := 1;
    MarkMask(chan%, startmask%[], 1);
end

proc MskEnds(chan%)
    var   endmask%[256];
    ArrConst(endmask%[], 0);
    endmask%[1] := 1;
    MarkMask(chan%, endmask%[], 1);
end

proc PrepHeadersTop(Vh%, NmHdrs%, GFName$)
    ' this will print 5 lines of header
    var i%;
    View(Vh%);
    Print("num_headers,%g\n", NmHdrs%);
    Print("file_name,%s\n",GFName$);
    Print("%s\n", "file_start_time");
    Print("%s,", "year");
    Print("%s,", "month");
    Print("%s,", "day");
    Print("%s,", "hour");
    Print("%s,", "minute");
    Print("%s,", "second");
    Print("%s\n", "microsecond");
    Print("%g", GFileTimeVec%[]);
    Print("\n");
    FrontView(GVt%);
end

proc PrepHeaderBtm(View%)
    ' this will print 1 line of header
    View(View%);
    Print("measure,num_evnts,evnt_times..\n");
    FrontView(GVt%)
end

proc PrepHeaderStim(CndChns%[], View%, Delim$)
    ' this will print a variable number of header lines
    ' to write in the correct header length, add calll ClcNumHdrLns with PlsFxd% = 6 (5 + 1 from prepheader top + prepheader btm)
    var condcount%;
    for condcount% := 1 to CndChns%[0] do
        PrintHeaderStim(CndChns%[condcount%], CndChns%[condcount%], GVt%, View%, Delim$);
    next;
end

func ClcNumHdrLns(CondChns%[], PlsFxd%)
    var i%, LnCounter% := 0;
    for i%:=1 to CondChns%[0] do
        LnCounter% := LnCounter% + CountHeadrStimLins(CondChns%[i%]);
    next;
    return (LnCounter% + PlsFxd%);
end;
